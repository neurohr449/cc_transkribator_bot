import asyncio
import logging
import sys
import os
import json
from datetime import datetime, timedelta
import aiohttp
from aiogram import types
from aiogram import Bot, Dispatcher, html, Router, BaseMiddleware, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from openai import OpenAI
from pydub import AudioSegment  
import tempfile
import aiofiles
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import uuid
import math

BOT_TOKEN = os.getenv("BOT_TOKEN")
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
MAX_FILE_SIZE = 24 * 1024 * 1024  # 24 –ú–ë —Å –∑–∞–ø–∞—Å–æ–º –æ—Ç –ª–∏–º–∏—Ç–∞ –≤ 25 –ú–ë
CHUNK_DURATION = 300  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
storage = MemoryStorage()
router = Router()
dp = Dispatcher(storage=storage)

class UserState(StatesGroup):
    audio = State()
    ass_token = State()
    company_name = State()

class StateMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        state = data['state']
        current_state = await state.get_state()
        data['current_state'] = current_state
        return await handler(event, data)

@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(UserState.ass_token)
    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
    await message.answer(f"{text}")

@router.message(StateFilter(UserState.ass_token))
async def company_name(message: Message, state: FSMContext):
    ass_token = message.text
    await state.update_data(ass_token=ass_token)
    await state.set_state(UserState.company_name)
    text = "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
    await message.answer(f"{text}")

@router.message(StateFilter(UserState.company_name))
async def ass_token(message: Message, state: FSMContext):
    company_name = message.text
    await state.update_data(company_name=company_name)
    await state.set_state(UserState.audio)
    text = "–ü—Ä–∏—Å—ã–ª–∞–π –∞—É–¥–∏–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"
    await message.answer(f"{text}")

async def convert_audio(input_path: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ WAV —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞"""
    unique_id = uuid.uuid4().hex
    output_path = os.path.join(tempfile.gettempdir(), f"converted_{unique_id}.wav")
    
    try:
        audio = AudioSegment.from_file(input_path)
        audio = audio.set_channels(1)  # –ú–æ–Ω–æ
        audio = audio.set_frame_rate(8000)  # 8 kHz
        
        audio.export(
            output_path,
            format="wav",
            codec="pcm_s16le",
            bitrate="64k"
        )
        
        if os.path.getsize(output_path) > MAX_FILE_SIZE:
            os.remove(output_path)
            raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            
        return output_path
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        if os.path.exists(output_path):
            os.remove(output_path)
        return None

async def process_large_audio(file_path: str, state: FSMContext) -> str:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
    audio = AudioSegment.from_file(file_path)
    duration_sec = len(audio) / 1000
    num_chunks = math.ceil(duration_sec / CHUNK_DURATION)
    all_texts = []
    
    for i in range(num_chunks):
        start = i * CHUNK_DURATION * 1000
        end = (i + 1) * CHUNK_DURATION * 1000
        chunk = audio[start:end]
        
        chunk_path = f"{file_path}_chunk_{i}.wav"
        chunk.export(chunk_path, format="wav")
        
        with open(chunk_path, "rb") as f:
            transcript = client.audio.transcriptions.create(
                file=f,
                model="whisper-1", 
                language="ru"
            )
            all_texts.append(transcript.text)
        
        os.remove(chunk_path)
    
    return "\n\n".join(
        f"[–ß–∞—Å—Ç—å {i+1}/{num_chunks}]\n{text}" 
        for i, text in enumerate(all_texts)
    )

async def process_audio_file(file_path: str, file_name: str, message: types.Message, state: FSMContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    file_size = os.path.getsize(file_path)
    
    if file_size <= MAX_FILE_SIZE:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        with open(file_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                file=audio_file,
                model="whisper-1",
                language="ru"
            )
        transcription_text = transcript.text
    else:
        # –†–∞–∑–±–∏–≤–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        await message.reply("–†–∞–∑–±–∏–≤–∞—é –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏...")
        transcription_text = await process_large_audio(file_path, state)
        
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    state_data = await state.get_data()
    assistant_id = state_data.get('ass_token')
    
    thread = client.beta.threads.create()
    client.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        content=transcription_text
    )
    
    run = client.beta.threads.runs.create(
        thread_id=thread.id,
        assistant_id=assistant_id
    )
    
    while True:
        run_status = client.beta.threads.runs.retrieve(
            thread_id=thread.id,
            run_id=run.id
        )
        if run_status.status == "completed":
            break
        await asyncio.sleep(1)
    
    messages = client.beta.threads.messages.list(thread_id=thread.id)
    response_text = messages.data[0].content[0].text.value
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    username = message.from_user.username or str(message.from_user.id)
    row_number = await write_to_google_sheets(
        transcription_text=transcription_text,
        ai_response=response_text,
        file_name=file_name,
        username=username,
        state=state
    )
    
    return row_number

@router.message(F.voice | F.audio | F.document, StateFilter(UserState.audio))
async def handle_audio(message: types.Message, state: FSMContext):
    unique_id = uuid.uuid4().hex
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        if message.voice:
            file = await bot.get_file(message.voice.file_id)
            ext = "ogg"
            file_name = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif message.audio:
            file = await bot.get_file(message.audio.file_id)
            ext = "mp3"
            file_name = message.audio.file_name or "–ê—É–¥–∏–æ—Ñ–∞–π–ª"
        else:
            if not message.document.mime_type.startswith('audio/'):
                return await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
            file = await bot.get_file(message.document.file_id)
            ext = os.path.splitext(message.document.file_name)[1][1:] or "mp3"
            file_name = message.document.file_name
        
        input_path = f"temp_{unique_id}.{ext}"
        await bot.download(file, destination=input_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        output_path = await convert_audio(input_path)
        if not output_path:
            return await message.reply("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        row_number = await process_audio_file(output_path, file_name, message, state)
        await message.reply(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Å—Ç—Ä–æ–∫—É {row_number}")
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path in [input_path, output_path]:
            if path and os.path.exists(path):
                try:
                    os.remove(path)
                except:
                    pass

async def write_to_google_sheets(transcription_text: str, ai_response: str, file_name: str, username: str, state: FSMContext) -> int:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏"""
    user_data = await state.get_data()
    company_name = user_data.get('company_name')
    assistant_id = user_data.get('ass_token')
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        service_account_info = {
            "type": os.getenv("GS_TYPE"),
            "project_id": os.getenv("GS_PROJECT_ID"),
            "private_key_id": os.getenv("GS_PRIVATE_KEY_ID"),
            "private_key": os.getenv("GS_PRIVATE_KEY").replace('\\n', '\n'),
            "client_email": os.getenv("GS_CLIENT_EMAIL"),
            "client_id": os.getenv("GS_CLIENT_ID"),
            "auth_uri": os.getenv("GS_AUTH_URI"),
            "token_uri": os.getenv("GS_TOKEN_URI"),
            "auth_provider_x509_cert_url": os.getenv("GS_AUTH_PROVIDER_X509_CERT_URL"),
            "client_x509_cert_url": os.getenv("GS_CLIENT_X509_CERT_URL"),
            "universe_domain": os.getenv("UNIVERSE_DOMAIN", "googleapis.com")
        }

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        scope = ['https://www.googleapis.com/auth/spreadsheets',
                'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
        gc = gspread.authorize(creds)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = gc.open_by_key(os.getenv("GSHEETS_SPREADSHEET_ID"))
        worksheet = spreadsheet.worksheet(os.getenv("GSHEETS_SHEET_NAME", "Sheet1"))

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        row_data = [
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),  # –î–∞—Ç–∞
            str(transcription_text),                       # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            str(ai_response),                              # –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            str(file_name),                                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            f"@{username}",                                # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            f"https://t.me/{username}",
            company_name,                                  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            assistant_id                                   # ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        worksheet.append_row(row_data)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
        return len(worksheet.col_values(1))
    
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {str(e)}"
        print(error_msg)
        raise Exception(error_msg)

async def main() -> None:
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    dp.include_router(router)
    dp.message.middleware(StateMiddleware())
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(
        parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())