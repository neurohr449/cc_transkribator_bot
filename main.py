import asyncio
import logging
import sys
import os
import json
from datetime import datetime, timedelta
import aiohttp
from aiogram import types
from aiogram import Bot, Dispatcher, html, Router, BaseMiddleware, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from openai import OpenAI
from pydub import AudioSegment  
import tempfile
import aiofiles
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import uuid
import math
from aiogram.client.session.aiohttp import AiohttpSession

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
MAX_FILE_SIZE = 24 * 1024 * 1024  # 24 –ú–ë —Å –∑–∞–ø–∞—Å–æ–º –æ—Ç –ª–∏–º–∏—Ç–∞ –≤ 25 –ú–ë
CHUNK_DURATION = 300  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)
DOWNLOAD_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
MAX_RETRIES = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
session = AiohttpSession(timeout=aiohttp.ClientTimeout(total=DOWNLOAD_TIMEOUT))
bot = Bot(token=BOT_TOKEN, session=session, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
router = Router()
dp = Dispatcher(storage=storage)

class UserState(StatesGroup):
    audio = State()
    ass_token = State()
    company_name = State()

class StateMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        state = data['state']
        current_state = await state.get_state()
        data['current_state'] = current_state
        return await handler(event, data)

async def safe_download(file: types.File, destination: str) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(MAX_RETRIES):
        try:
            await bot.download(file, destination=destination)
            return True
        except (asyncio.TimeoutError, aiohttp.ClientError) as e:
            if attempt == MAX_RETRIES - 1:
                raise
            await asyncio.sleep(2 * (attempt + 1))
            continue
        except Exception as e:
            raise
    return False

async def convert_audio(input_path: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ WAV —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞"""
    unique_id = uuid.uuid4().hex
    output_path = os.path.join(tempfile.gettempdir(), f"converted_{unique_id}.wav")
    
    try:
        audio = AudioSegment.from_file(input_path)
        audio = audio.set_channels(1)  # –ú–æ–Ω–æ
        audio = audio.set_frame_rate(8000)  # 8 kHz
        
        audio.export(
            output_path,
            format="wav",
            codec="pcm_s16le",
            bitrate="64k"
        )
        
        if os.path.getsize(output_path) > MAX_FILE_SIZE:
            os.remove(output_path)
            raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            
        return output_path
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        if 'output_path' in locals() and os.path.exists(output_path):
            os.remove(output_path)
        return None

async def process_large_audio(file_path: str) -> str:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
    try:
        audio = AudioSegment.from_file(file_path)
        duration_sec = len(audio) / 1000
        num_chunks = math.ceil(duration_sec / CHUNK_DURATION)
        all_texts = []
        
        for i in range(num_chunks):
            start = i * CHUNK_DURATION * 1000
            end = (i + 1) * CHUNK_DURATION * 1000
            chunk = audio[start:end]
            
            chunk_path = f"{file_path}_chunk_{i}.wav"
            try:
                chunk.export(chunk_path, format="wav")
                
                with open(chunk_path, "rb") as f:
                    transcript = client.audio.transcriptions.create(
                        file=f,
                        model="whisper-1", 
                        language="ru"
                    )
                    all_texts.append(transcript.text)
            finally:
                if os.path.exists(chunk_path):
                    os.remove(chunk_path)
        
        return "\n\n".join(f"[–ß–∞—Å—Ç—å {i+1}/{num_chunks}]\n{text}" for i, text in enumerate(all_texts))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        raise

async def process_audio_file(file_path: str, file_name: str, message: types.Message, state: FSMContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        file_size = os.path.getsize(file_path)
        
        if file_size <= MAX_FILE_SIZE:
            with open(file_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(
                    file=audio_file,
                    model="whisper-1",
                    language="ru"
                )
            transcription_text = transcript.text
        else:
            await message.reply("üî™ –†–∞–∑–±–∏–≤–∞—é –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏...")
            transcription_text = await process_large_audio(file_path)
        
        state_data = await state.get_data()
        assistant_id = state_data.get('ass_token')
        
        thread = client.beta.threads.create()
        client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=transcription_text
        )
        
        run = client.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=assistant_id
        )
        
        while True:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread.id,
                run_id=run.id
            )
            if run_status.status == "completed":
                break
            await asyncio.sleep(1)
        
        messages = client.beta.threads.messages.list(thread_id=thread.id)
        response_text = messages.data[0].content[0].text.value
        
        username = message.from_user.username or str(message.from_user.id)
        return await write_to_google_sheets(
            transcription_text=transcription_text,
            ai_response=response_text,
            file_name=file_name,
            username=username,
            state=state
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        raise

@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(UserState.ass_token)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç-–±–æ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")

@router.message(StateFilter(UserState.ass_token))
async def company_name(message: Message, state: FSMContext):
    await state.update_data(ass_token=message.text)
    await state.set_state(UserState.company_name)
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")

@router.message(StateFilter(UserState.company_name))
async def ass_token(message: Message, state: FSMContext):
    await state.update_data(company_name=message.text)
    await state.set_state(UserState.audio)
    await message.answer("–ü—Ä–∏—Å—ã–ª–∞–π –∞—É–¥–∏–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏")

@router.message(F.voice | F.audio | F.document, StateFilter(UserState.audio))
async def handle_audio(message: types.Message, state: FSMContext):
    unique_id = uuid.uuid4().hex
    input_path = None
    output_path = None
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if message.voice:
            file = await bot.get_file(message.voice.file_id)
            ext = "ogg"
            file_name = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif message.audio:
            file = await bot.get_file(message.audio.file_id)
            ext = "mp3"
            file_name = message.audio.file_name or "–ê—É–¥–∏–æ—Ñ–∞–π–ª"
        else:
            if not message.document.mime_type.startswith('audio/'):
                await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª")
                return
            file = await bot.get_file(message.document.file_id)
            ext = os.path.splitext(message.document.file_name)[1][1:] or "mp3"
            file_name = message.document.file_name
        
        input_path = f"temp_{unique_id}.{ext}"
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            if not await safe_download(file, input_path):
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                return
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if os.path.getsize(input_path) > 100 * 1024 * 1024:
            os.remove(input_path)
            await message.reply("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100MB")
            return

        await message.reply("üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        output_path = await convert_audio(input_path)
        if not output_path:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        try:
            row_number = await process_audio_file(output_path, file_name, message, state)
            await message.reply(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Å—Ç—Ä–æ–∫—É {row_number}")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ handle_audio")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path in [input_path, output_path]:
            if path and os.path.exists(path):
                try:
                    os.remove(path)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {e}")

async def write_to_google_sheets(transcription_text: str, ai_response: str, file_name: str, username: str, state: FSMContext) -> int:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏"""
    try:
        user_data = await state.get_data()
        service_account_info = {
            "type": os.getenv("GS_TYPE"),
            "project_id": os.getenv("GS_PROJECT_ID"),
            "private_key_id": os.getenv("GS_PRIVATE_KEY_ID"),
            "private_key": os.getenv("GS_PRIVATE_KEY").replace('\\n', '\n'),
            "client_email": os.getenv("GS_CLIENT_EMAIL"),
            "client_id": os.getenv("GS_CLIENT_ID"),
            "auth_uri": os.getenv("GS_AUTH_URI"),
            "token_uri": os.getenv("GS_TOKEN_URI"),
            "auth_provider_x509_cert_url": os.getenv("GS_AUTH_PROVIDER_X509_CERT_URL"),
            "client_x509_cert_url": os.getenv("GS_CLIENT_X509_CERT_URL"),
            "universe_domain": os.getenv("UNIVERSE_DOMAIN", "googleapis.com")
        }

        scope = ['https://www.googleapis.com/auth/spreadsheets',
               'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_dict(service_account_info, scope)
        gc = gspread.authorize(creds)

        spreadsheet = gc.open_by_key(os.getenv("GSHEETS_SPREADSHEET_ID"))
        worksheet = spreadsheet.worksheet(os.getenv("GSHEETS_SHEET_NAME", "Sheet1"))

        row_data = [
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            str(transcription_text),
            str(ai_response),
            str(file_name),
            f"@{username}",
            f"https://t.me/{username}",
            user_data.get('company_name'),
            user_data.get('ass_token')
        ]

        worksheet.append_row(row_data)
        return len(worksheet.col_values(1))
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {str(e)}")
        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {str(e)}")

async def main() -> None:
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        stream=sys.stdout
    )
    dp.include_router(router)
    dp.message.middleware(StateMiddleware())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())